apply plugin: 'kotlin-jpa'
apply plugin: 'net.corda.plugins.cordapp-cpk'


evaluationDependsOn(":modules:selection")

def selectionProject = project(":modules:selection")

cordapp {
    targetPlatformVersion corda_platform_version.toInteger()
    minimumPlatformVersion corda_platform_version as Integer
    workflow {
        name "Token SDK Workflows"
        vendor "R3"
        licence "Apache 2"
        versionId 3
    }
    signing {
        enabled = false
    }
}

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
    test {
        resources {
            srcDir rootProject.file("config/test")
        }
    }
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/kotlin')
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

compileKotlin {
    dependsOn(selectionProject.jar)
}

dependencies {
    implementation "org.liquibase:liquibase-core:$liquibaseVersion"
    cordaProvided("org.hibernate:hibernate-core:$hibernateVersion")

    // Corda dependencies.
    cordaProvided("$corda_release_group:corda-application:$corda_release_version") { changing = true }
    cordaProvided("$corda_release_group:corda-node-api:$corda_release_version") { changing = true }
    cordaProvided("$corda_release_group:corda-ledger:$corda_release_version") { changing = true}
    cordaProvided("$corda_release_group:corda-crypto-api:$corda_release_version") { changing = true}
    cordaProvided("$corda_release_group:corda-persistence:$corda_release_version") { changing = true}

    cordapp("$corda_release_group:corda-flows:$corda_release_version") { changing = true}

    // Logging.
    testCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"

    // Testing.
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"

    // CorDapp dependencies.
    cordapp project(":contracts")

    cordapp project(":modules:selection")

    //CI for confidential tokens
    cordapp "$confidential_id_release_group:ci-workflows:$confidential_id_release_version"

    compile("org.postgresql:postgresql:42.2.18")
}

task integrationTest(type: Test, dependsOn: []) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.named('jar', Jar) {
    archiveBaseName = 'tokens-workflows'
    bnd """\
Bundle-Name: Corda Token SDK Workflows
Bundle-SymbolicName: \${project.group}.tokens-workflows
"""
}