plugins {
    id 'net.corda.plugins.cordapp-cpk'
    id 'org.jetbrains.kotlin.jvm'
    id 'jacoco'
    id 'org.jetbrains.kotlin.plugin.jpa'
    id 'org.jetbrains.kotlin.plugin.allopen'
    id 'org.jetbrains.kotlin.plugin.noarg'
}

evaluationDependsOn(":modules:selection")

def selectionProject = project(":modules:selection")

cordapp {
    targetPlatformVersion corda_platform_version.toInteger()

    workflow {
        name "Token SDK Workflows"
        vendor "Corda Open Source"
        licence "Apache License, Version 2.0"
        versionId 3
    }
    signing {
        enabled = true
    }
}

sourceSets {
    test {
        resources {
            srcDir rootProject.file("config/test")
        }
    }
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/kotlin')
        }
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

compileKotlin {
    dependsOn(selectionProject.jar)
}

dependencies {
    cordaProvided("org.hibernate:hibernate-core:$hibernateVersion")

    // Corda dependencies.
    cordaProvided("$corda_release_group:corda-application:$corda_release_version")
    cordaProvided("$corda_release_group:corda-node-api:$corda_release_version")
    cordaProvided("$corda_release_group:corda-ledger:$corda_release_version")
    cordaProvided("$corda_release_group:corda-crypto-api:$corda_release_version")
    cordaProvided("$corda_release_group:corda-persistence:$corda_release_version")

    cordapp("$corda_release_group:corda-flows:$corda_release_version")

    // Logging.
    testRuntimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"

    // Testing.
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"

    // CorDapp dependencies.
    cordapp project(":contracts")

    cordapp project(":modules:selection")

    //CI for confidential tokens
    cordapp "$confidential_id_release_group:ci-workflows:$confidential_id_release_version"
}

task integrationTest(type: Test, dependsOn: []) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.named('jar', Jar) {
    archiveBaseName = "tokens-workflows"
}