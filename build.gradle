import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

import static org.gradle.api.JavaVersion.VERSION_11

buildscript {
    ext {
        cordaArtifactoryUsername = System.getenv('CORDA_ARTIFACTORY_USERNAME') ?: System.getProperty('corda.artifactory.username')
        cordaArtifactoryPassword = System.getenv('CORDA_ARTIFACTORY_PASSWORD') ?: System.getProperty('corda.artifactory.password')
    }

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url "$artifactoryContextUrl/corda-releases" }
        maven { url "$artifactoryContextUrl/corda-dev" }
        maven { url "https://repo.gradle.org/gradle/libs-releases-local/" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath "net.corda.plugins:cordapp-cpk:$corda_gradle_plugins_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
    }
}

plugins {
    id 'jacoco'
    id "com.jfrog.artifactory" version "$jfrogArtifactoryPluginVersion"
    id 'io.gitlab.arturbosch.detekt' version "$detektVersion"
    id 'net.corda.cordapp.cordapp-configuration' version "$corda_release_version"
}

allprojects {
    version "$tokens_release_version"
    group "$tokens_release_group"

    configurations.all {
        resolutionStrategy {
            // Force dependencies to use the same version of Kotlin
            force "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
            force "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
            force "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
            force "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
            force "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

            cacheChangingModulesFor 0, 'seconds'
        }
    }
}

subprojects {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url "$artifactoryContextUrl/corda-dev" }
        maven { url "$artifactoryContextUrl/corda-releases" }
        maven { url "$artifactoryContextUrl/corda-lib" }
        maven { url "$artifactoryContextUrl/corda-lib-dev" }
        maven { url "https://repo.gradle.org/gradle/libs-releases-local/" }
        //needed for C5 binaries
        maven {
            url = "$artifactoryContextUrl/corda-os-maven-unstable"
            credentials {
                username = cordaArtifactoryUsername
                password = cordaArtifactoryPassword
            }
        }
        maven {
            url = "$artifactoryContextUrl/corda-dependencies"
        }
    }

    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'jacoco'
    apply plugin: 'io.gitlab.arturbosch.detekt'

    java {
        sourceCompatibility = VERSION_11
        targetCompatibility = VERSION_11
    }

    tasks.withType(KotlinCompile) {
        kotlinOptions {
            allWarningsAsErrors = true
            languageVersion = "1.4"
            apiVersion = "1.4"
            jvmTarget = VERSION_11
            javaParameters = true   // Useful for reflection.
            freeCompilerArgs += [
                    "-Xjvm-default=all",
                    // Prevent Kotlin from warning about kotlin.* classes inside the OSGi bundle.
                    "-Xskip-runtime-version-check",
                    "-java-parameters"
            ]
        }
    }

    tasks.withType(Jar) {
        jar {
            exclude "**/log4j2*.xml"
        }
    }

    tasks.withType(Test) {
        minHeapSize = "128m"
        maxHeapSize = "4096m"
    }
}

// Don't publish an empty "modules" JAR.
def publishProjects = [
        project(":contracts"),
        project(":workflows")
]

configure(publishProjects) { subproject ->
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.artifactory'

    task sourceJar(type: Jar, dependsOn: subproject.classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: subproject.javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task install(dependsOn: 'publishToMavenLocal')

    publishing {
        publications {
            create(subproject.name, MavenPublication) {
                from components.java

                groupId subproject.group
                artifactId "tokens-${subproject.name}"
                artifact tasks.sourceJar
                artifact tasks.javadocJar

                pom {
                    description = subproject.description
                }
            }
        }
    }
}


artifactory {
    publish {
        contextUrl = artifactoryContextUrl
        repository {
            repoKey = 'corda-lib-dev'
            username = cordaArtifactoryUsername
            password = cordaArtifactoryPassword
            maven = true
        }

        defaults {
            publishPom = true
            publishArtifacts = true
            publishBuildInfo = true

            if (publishProjects.contains(project)) {
                publications(project.name)
            }
        }
    }
}

wrapper {
    gradleVersion = "6.8.3"
    distributionType = Wrapper.DistributionType.ALL
}